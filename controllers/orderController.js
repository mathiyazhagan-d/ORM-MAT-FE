import asyncHandler from 'express-async-handler';
import Order from '../models/orderModel.js';
import stripe from 'stripe';

//@desc Create new order
//@route POST /api/orders
//@access Private

export const addOrderItems = asyncHandler( async(req,res) => {

    const { orderItems, shippingAddress, paymentMethod, itemsPrice, shippingPrice, totalPrice } = req.body;

    if(orderItems && orderItems.length === 0){
        res.status(400);
        throw new Error('No order items');
        return
    } else {
        const order = new Order({
            orderItems,
            user: req.user._id,
            shippingAddress,
            paymentMethod,
            itemsPrice,
            shippingPrice,
            totalPrice 
        });

        const createdOrder = await order.save();

        res.status(201).json(createdOrder);
    }
});

// @desc Get Order by ID
// @route GET /api/orders/:id
// @access Private
export const getOrderById = asyncHandler( async(req,res) => {

    const order = await Order.findById(req.params.id).populate('user', 'name email');

    if(order){
        res.json(order)
    } else {
        res.status(404)
        throw new Error('Order not found')
    }
});

// @desc Update order to paid
// @route GET /api/orders/:id/pay
// @access Private
export const updateOrderToPaid = asyncHandler(async (req, res) => {
    const order = await Order.findById(req.params.id);
  
    if (order) {
      // Create a charge using the Stripe API
      const charge = await stripe.charges.create({
        amount: order.totalPrice * 100, // amount in cents
        currency: 'usd',
        source: req.body.token.id, // token generated by Stripe checkout
        description: `Order #${order._id}`,
        metadata: {
          order_id: order._id,
        },
      });
  
      // Update the order status to paid
      order.isPaid = true;
      order.paidAt = Date.now();
      order.paymentResult = {
        id: charge.id,
        status: charge.status,
        update_time: charge.created,
        email_address: charge.receipt_email,
      };
  
      const updatedOrder = await order.save();
  
      res.json(updatedOrder);
    } else {
      res.status(404);
      throw new Error('Order not found');
    }
  });

// @desc Get orders of logged in user
// @route GET /api/orders/myorders
// @access Private
export const getUserOrders = asyncHandler( async(req,res) => {

    const orders = await Order.find({ user: req.user._id });
    
    res.json(orders);
});

// @desc Get all orders
// @route GET /api/orders
// @access Private/Admin
export const getOrders = asyncHandler( async(req,res) => {

    const orders = await Order.find({}).populate('user','id name') ;
    
    res.json(orders);
});


// @desc Update order to paid
// @route GET /api/orders/:id/deliver
// @access Private
export const updateOrderToDelivered = asyncHandler( async(req,res) => {

    const order = await Order.findById(req.params.id);

    if(order){
        order.isDelivered = true;
        order.deliveredAt = Date.now();

        const updatedOrder = await order.save()

        res.json(updatedOrder);
        
    } else {
        res.status(404)
        throw new Error('Order not found')
    }
});